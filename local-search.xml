<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo-fluid主题美化</title>
    <link href="/posts/45847.html"/>
    <url>/posts/45847.html</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Fluid-美化"><a href="#Hexo-Fluid-美化" class="headerlink" title="Hexo + Fluid 美化"></a>Hexo + Fluid 美化</h1><div class="note note-warning">            <p>注意</p><p>本文中的 “博客配置” 指的 Hexo 博客目录下的 _config.yml。</p><p>“主题配置” 指的是 theme&#x2F;fluid&#x2F;_config.yml 或者 _config.fluid.yml 。</p><p>注意区别</p>          </div><h1 id="添加网站运行时间"><a href="#添加网站运行时间" class="headerlink" title="添加网站运行时间"></a>添加网站运行时间</h1><p>页脚添加网站运行时间，只需要在主题配置中的<font color=HotPink> footer: content </font>&gt;添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">footer:</span><br>  <span class="hljs-attr">content:</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">    &lt;div&gt;</span><br><span class="hljs-string">      &lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><br><span class="hljs-string">      &lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class="hljs-string">      &lt;script src=&quot;/js/duration.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">    &lt;/div&gt;</span><br><span class="hljs-string">  &#x27;</span><br></code></pre></td></tr></table></figure><p>之后在主题目录下创建<font color=HotPink> source&#x2F;js&#x2F;duration.js</font>，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createtime</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> grt= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;03/03/2021 12:00:00&quot;</span>);<span class="hljs-comment">//在此处修改你的建站时间，格式：月/日/年 时:分:秒</span><br>    now.<span class="hljs-title function_">setTime</span>(now.<span class="hljs-title function_">getTime</span>()+<span class="hljs-number">250</span>);<br>    days = (now - grt ) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> / <span class="hljs-number">24</span>; dnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(days);<br>    hours = (now - grt ) / <span class="hljs-number">1000</span> / <span class="hljs-number">60</span> / <span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * dnum); hnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(hours);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(hnum).<span class="hljs-property">length</span> ==<span class="hljs-number">1</span> )&#123;hnum = <span class="hljs-string">&quot;0&quot;</span> + hnum;&#125; minutes = (now - grt ) / <span class="hljs-number">1000</span> /<span class="hljs-number">60</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * hnum);<br>    mnum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(minutes); <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(mnum).<span class="hljs-property">length</span> ==<span class="hljs-number">1</span> )&#123;mnum = <span class="hljs-string">&quot;0&quot;</span> + mnum;&#125;<br>    seconds = (now - grt ) / <span class="hljs-number">1000</span> - (<span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * dnum) - (<span class="hljs-number">60</span> * <span class="hljs-number">60</span> * hnum) - (<span class="hljs-number">60</span> * mnum);<br>    snum = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(seconds); <span class="hljs-keyword">if</span>(<span class="hljs-title class_">String</span>(snum).<span class="hljs-property">length</span> ==<span class="hljs-number">1</span> )&#123;snum = <span class="hljs-string">&quot;0&quot;</span> + snum;&#125;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;timeDate&quot;</span>).<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;本站已安全运行 &quot;</span>+dnum+<span class="hljs-string">&quot; 天 &quot;</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;times&quot;</span>).<span class="hljs-property">innerHTML</span> = hnum + <span class="hljs-string">&quot; 小时 &quot;</span> + mnum + <span class="hljs-string">&quot; 分 &quot;</span> + snum + <span class="hljs-string">&quot; 秒&quot;</span>;<br>&#125;<br><span class="hljs-built_in">setInterval</span>(<span class="hljs-string">&quot;createtime()&quot;</span>,<span class="hljs-number">250</span>);<br></code></pre></td></tr></table></figure><p>将建站时间修改为你自己的建站时间，即可在页脚加入网站运行时间</p><h1 id="添加一言"><a href="#添加一言" class="headerlink" title="添加一言"></a>添加一言</h1><p>在主题配置 <font color=HotPink>_config.yml </font>中找到<font color=HotPink> custom_head </font>，修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">custom_head:</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">    &lt;!-- 一言 --&gt;</span><br><span class="hljs-string">    &lt;script src=&quot;https://v1.hitokoto.cn/?encode=js&amp;select=%23hitokoto&quot; defer&gt;&lt;/script&gt;</span><br><span class="hljs-string">    &#x27;</span><br></code></pre></td></tr></table></figure><p>修改完成之后，在任意地方添加如下代码即可获取一言</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hitokoto&quot;</span>&gt;</span>:D 获取中...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="其他美化后续添加"><a href="#其他美化后续添加" class="headerlink" title="其他美化后续添加"></a>其他美化后续添加</h1><h1 id="Hexo文件压缩"><a href="#Hexo文件压缩" class="headerlink" title="Hexo文件压缩"></a>Hexo文件压缩</h1><div class="note note-info">            <p>** 为什么要压缩页面静态资源 **</p><p>对于个人博客来说，优化页面的访问速度是很有必要的，如果打开你的个人站点，加载个首页就要十几秒，页面长时间处于空白状态，想必没什么人能够忍受得了吧。我个人觉得，如果能把页面的加载时间控制在三四秒内，就很不错了。</p><p>那么怎么提高<a href="https://so.csdn.net/so/search?q=hexo&spm=1001.2101.3001.7020">hexo</a>这个静态博客的页面加载速度呢？可以从以下的几个方面去入手： </p><ol><li>将js文件尽可能放置到body的闭合标签之前，因为在加载或者引入js文件时是阻塞式的，如果我们在页面的最开始就引入这些js文件，而这些文件又比较大，会造成页面在渲染时长时间处于白屏状态。</li><li>尽量避免去引用访问速度非常低下的cdn或者图片，可以改用访问速度更快的cdn，或者将难以迅速加载的图片保存到自己的站点目录下，以免在加载图片时耗费了大量的时间，最后还加载不出来。</li><li>对页面的静态资源进行压缩，包括css、js和html等文件。我们自己添加的css和js文件为了可读性，往往会有很多换行和空格，这些对于浏览器来说并没什么卵用，甚至还会降低渲染页面的速度。至于html文件，由于Markdown转成html的bug，会导致页面存在大量的空白，如果你查看下页面的源代码，就会发现这些大量的空白符，十分难看。这也会造成页面渲染的性能问题。</li></ol>          </div><h2 id="在站点根目录下安装hexo-neat"><a href="#在站点根目录下安装hexo-neat" class="headerlink" title="在站点根目录下安装hexo-neat"></a>在站点根目录下安装hexo-neat</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install hexo-neat --save<br></code></pre></td></tr></table></figure><p><strong>为站点配置文件添加相关配置</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-neat</span><br><span class="hljs-comment"># 博文压缩</span><br><span class="hljs-attr">neat_enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 压缩html</span><br><span class="hljs-attr">neat_html:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span><br><span class="hljs-comment"># 压缩css  </span><br><span class="hljs-attr">neat_css:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/*.min.css&#x27;</span><br><span class="hljs-comment"># 压缩js</span><br><span class="hljs-attr">neat_js:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">mangle:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">output:</span><br>  <span class="hljs-attr">compress:</span><br>  <span class="hljs-attr">exclude:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/*.min.js&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/jquery.fancybox.pack.js&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;**/index.js&#x27;</span>  <br></code></pre></td></tr></table></figure><p>就可以正常发布部署了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo clean<br>hexo g<br>hexo d<br>hexo s<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo，Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo+git分支实现多终端工作</title>
    <link href="/posts/38732.html"/>
    <url>/posts/38732.html</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>问题来了，如果你现在在自己的笔记本上写的博客，部署在了网站上，那么你在家里用台式机，或者实验室的台式机，发现你电脑里面没有博客的文件，或者要换电脑了，最后不知道怎么移动文件，怎么办？</p><p>在这里我们就可以利用git的分支系统进行多终端工作了，这样每次打开不一样的电脑，只需要进行简单的配置和在github上把文件同步下来，就可以无缝操作了。</p>          </div><h1 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h1><p>机制是这样的，由于hexo d上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。</p><p><img src="/img/article/2023/7/1.png"></p><p>也就是上传的是在本地目录里自动生成的<code>.deploy_git</code>里面。其他文件 ，包括我们写在source 里面的，和<a href="https://www.zhihu.com/search?q=%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:489124966%7D">配置文件</a>，主题文件，都没有上传到github。所以可以利用git的分支管理，将源文件上传到github的另一个分支即可。</p><h1 id="上传分支"><a href="#上传分支" class="headerlink" title="上传分支"></a>上传分支</h1><p>首先，先在github上新建一个hexo分支，如图：</p><p><img src="/img/article/2023/7/2.jpg"></p><p>然后在这个仓库的settings中，选择默认分支为<a href="https://www.zhihu.com/search?q=hexo%E5%88%86%E6%94%AF&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:489124966%7D">hexo分支</a>（这样每次同步的时候就不用指定分支，比较方便）。</p><p><img src="/img/article/2023/7/3.png"></p><p>然后在本地的任意目录下，打开git bash，将分支克隆下来</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> 链接地址<br></code></pre></td></tr></table></figure><p>接下来在克隆到本地的<code>ZJUFangzh.github.io</code>中，把除了.git 文件夹外的所有文件都删掉</p><p>把之前我们写的博客源文件全部复制过来，除了<code>.deploy_git</code>。这里应该说一句，复制过来的源文件应该有一个<code>.gitignore</code>，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs .gitignore">.DS_Store<br>Thumbs.db<br>db.json<br>*.log<br>node_modules/<br>public/<br>.deploy*/<br></code></pre></td></tr></table></figure><p>注意，如果你之前克隆过<a href="https://www.zhihu.com/search?q=theme&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:489124966%7D">theme</a>中的主题文件，那么应该把主题文件中的<code>.git</code>文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了</p><p>然后上传</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">git add .<br>git commit –m <span class="hljs-string">&quot;add branch&quot;</span><br>git push <br></code></pre></td></tr></table></figure><p>这样就上传完了，可以去你的github上看一看hexo分支有没有上传上去，其中<code>node_modules</code>、<code>public</code>、<code>db.json</code>已经被忽略掉了，没有关系，不需要上传的，因为在别的电脑上需要重新输入命令安装 。</p><p><img src="/img/article/2023/7/4.png"></p><p>这样就上传完了。</p><h1 id="更换电脑操作"><a href="#更换电脑操作" class="headerlink" title="更换电脑操作"></a>更换电脑操作</h1><p>一样的，跟之前的环境搭建一样，安装git、node、hexo</p><p>但是已经不需要初始化了，</p><p>直接在任意文件夹下，</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> 链接<br></code></pre></td></tr></table></figure><p>然后进入克隆到的文件夹：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> xxx.github.io<br>npm install<br>npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>生成，部署</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo g<br>hexo d<br><br></code></pre></td></tr></table></figure><p>然后就可以开始写你的新博客了</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a><strong>Tips:</strong></h1><ol><li><p>不要忘了，每次写完最好都把源文件上传一下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">git add .<br>git commit –m <span class="hljs-string">&quot;xxxx&quot;</span><br>git push <br><br></code></pre></td></tr></table></figure></li><li><p>如果是在已经编辑过的电脑上，已经有<a href="https://www.zhihu.com/search?q=clone&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:489124966%7D">clone</a>文件夹了，那么，每次只要和远端同步一下就行了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git pull<br></code></pre></td></tr></table></figure></li><li><p><a href="https://blog.csdn.net/weixin_46686999/article/details/105184794">windows搭建Hexo—超详细</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo迁移</title>
    <link href="/posts/21293.html"/>
    <url>/posts/21293.html</url>
    
    <content type="html"><![CDATA[<h1 id="1-在新电脑上安装git和Node-js"><a href="#1-在新电脑上安装git和Node-js" class="headerlink" title="1.在新电脑上安装git和Node.js"></a>1.在新电脑上安装git和Node.js</h1><h1 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2.安装Hexo"></a>2.安装Hexo</h1><h1 id="3-复制原电脑上的数据"><a href="#3-复制原电脑上的数据" class="headerlink" title="3. 复制原电脑上的数据"></a>3. 复制原电脑上的数据</h1><h2 id="3-1需要复制的"><a href="#3-1需要复制的" class="headerlink" title="3.1需要复制的"></a>3.1需要复制的</h2><div class="note note-info">            <ul><li><p>_config.yml：站点配置&#x2F;对应的主题配置</p></li><li><p>package.json：说明使用那些包</p></li><li><p>scaffolds：文章的模板</p></li><li><p>source：自己写的博客文件</p></li><li><p>themes：主题</p></li><li><p>.gitignore：限定在提交的时候哪些文件可以忽略</p></li></ul>          </div><h1 id="4-新建一个博客文件，将复制的文件粘贴进去"><a href="#4-新建一个博客文件，将复制的文件粘贴进去" class="headerlink" title="4.新建一个博客文件，将复制的文件粘贴进去"></a>4.新建一个博客文件，将复制的文件粘贴进去</h1><p>在git bash中切换目录到新拷贝的文件夹里，使用npm install 命令，进行模块安装。很明显我们这里没用hexo init初始化，因为有的文件我们已经拷贝生成过来了，所以不必用hexo init去整体初始化，如果不慎在此时用了hexo init，则站点的配置文件_config.yml里面内容会被清空使用默认值，所以这一步一定要慎重，不要用hexo init。</p><h1 id="5-安装其他插件"><a href="#5-安装其他插件" class="headerlink" title="5.安装其他插件"></a>5.安装其他插件</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install hexo-deployer-git --save <span class="hljs-comment"># 为了使用hexo d来部署到git上 </span><br><span class="hljs-comment">#下面可以省略</span><br>npm install hexo-generator-feed --save <span class="hljs-comment"># 为了建立RSS订阅</span><br>npm install hexo-generator-sitemap --save <span class="hljs-comment"># 为了建立站点地图</span><br><br></code></pre></td></tr></table></figure><h1 id="6-验证"><a href="#6-验证" class="headerlink" title="6.验证"></a>6.验证</h1><p>首先本地执行，在博客根目录下执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo g<br>hexo s<br><br></code></pre></td></tr></table></figure><p>此时可访问浏览器：<a href="http://localhost:4000/">http://localhost:4000/</a> ，查看是否转移成功。</p><h1 id="7-部署"><a href="#7-部署" class="headerlink" title="7.部署"></a>7.部署</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git常用命令</title>
    <link href="/posts/953.html"/>
    <url>/posts/953.html</url>
    
    <content type="html"><![CDATA[<h1 id="Git常用指令"><a href="#Git常用指令" class="headerlink" title="Git常用指令"></a>Git常用指令</h1><div class="note note-info">            <h1 id="设置全局的用户名称"><a href="#设置全局的用户名称" class="headerlink" title="设置全局的用户名称"></a>设置全局的用户名称</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git config --global user.name <span class="hljs-string">&quot;用户名&quot;</span><br></code></pre></td></tr></table></figure><h1 id="设置全局的邮箱地址"><a href="#设置全局的邮箱地址" class="headerlink" title="设置全局的邮箱地址"></a>设置全局的邮箱地址</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git config --global user.email <span class="hljs-string">&quot;邮箱地址&quot;</span><br></code></pre></td></tr></table></figure><h1 id="查看全局配置信息"><a href="#查看全局配置信息" class="headerlink" title="查看全局配置信息"></a>查看全局配置信息</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git config --list<br></code></pre></td></tr></table></figure><h1 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git init<br></code></pre></td></tr></table></figure><h1 id="添加到暂存区"><a href="#添加到暂存区" class="headerlink" title="添加到暂存区"></a>添加到暂存区</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">git add 文件名称<br><span class="hljs-comment">#回撤</span><br>git <span class="hljs-built_in">rm</span> --cached 文件名称<br></code></pre></td></tr></table></figure><h1 id="查看文件状态"><a href="#查看文件状态" class="headerlink" title="查看文件状态"></a>查看文件状态</h1><p>红色代表没有被git管理的文件，即使是已经管理过，但是修改后，也是红色的状态</p><p>绿色代表添加到暂存区的文件</p><p>已暂存：文件被管理到暂存区，绿色</p><p>未修改：文件还没有被管理到暂存区，红色</p><p>已提交：文件已经交给git仓库进行管理了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git status<br></code></pre></td></tr></table></figure><h1 id="提交到本地仓库"><a href="#提交到本地仓库" class="headerlink" title="提交到本地仓库"></a>提交到本地仓库</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git commit -m <span class="hljs-string">&quot;日志信息&quot;</span><br></code></pre></td></tr></table></figure><h1 id="查看日志信息"><a href="#查看日志信息" class="headerlink" title="查看日志信息"></a>查看日志信息</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看本地日志信息</span><br>git <span class="hljs-built_in">log</span><br><span class="hljs-comment"># 查看本地日志信息，简介模式</span><br>git <span class="hljs-built_in">log</span> --oneline<br><span class="hljs-comment"># 查看历史日志信息</span><br>git reflog<br><span class="hljs-comment">#查看文件内容</span><br><span class="hljs-built_in">cat</span> 文件名称<br></code></pre></td></tr></table></figure><h1 id="版本切换"><a href="#版本切换" class="headerlink" title="版本切换"></a>版本切换</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git reset --hard 版本唯一标识<br></code></pre></td></tr></table></figure><h1 id="查看提交文件的内容"><a href="#查看提交文件的内容" class="headerlink" title="查看提交文件的内容"></a>查看提交文件的内容</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看此次提交的文件列表</span><br>git ls-tree commit唯一标识<br><br><span class="hljs-comment"># 查看文件列表中的文件内容</span><br>git cat-file blob 文件的唯一标识<br></code></pre></td></tr></table></figure><h1 id="文件内容比较"><a href="#文件内容比较" class="headerlink" title="文件内容比较"></a>文件内容比较</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 比较的是本地仓库的工作目录的文件差异</span><br>git diff 文件名称<br><br><span class="hljs-comment"># 其他版本的文件比较，比较的是其他版本的本地仓库的内容和当前的文件的差异</span><br>git diff 版本标识 文件名称<br></code></pre></td></tr></table></figure><h1 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br><span class="hljs-comment"># 如果文件没有被本地仓库管理，那么可以直接删除</span><br><span class="hljs-comment"># 如果文件已经被本地仓库管理，那么直接删除，本地仓库中还是包含这个文件的</span><br><span class="hljs-comment"># 先删除文件，再添加到暂存区，然后提交到本地仓库中</span><br><span class="hljs-built_in">rm</span> -rf 文件名称<br><br>git add .<br><br>git commit -m <span class="hljs-string">&quot;日志信息&quot;</span><br></code></pre></td></tr></table></figure><h1 id="文件找回"><a href="#文件找回" class="headerlink" title="文件找回"></a>文件找回</h1><p>通过版本切换的命令，切换到没有删除的版本当中即可，保存好你当前的代码，再去操作</p><h1 id="git分支命令"><a href="#git分支命令" class="headerlink" title="git分支命令"></a>git分支命令</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#查看分支</span><br>git branch<br><span class="hljs-comment">#创建分支 创建的新的分支和当前分支的内容是一致的</span><br>git branch 分支名称<br><span class="hljs-comment">#切换分支</span><br>git checkout 分支名称<br><span class="hljs-comment">#切换并创建分支</span><br>git checkout -b 分支名称 <br><span class="hljs-comment">#删除分支</span><br><span class="hljs-comment">#创建出的分支如果没有被修改，可以通过普通的方式进行删除</span><br><span class="hljs-comment">#创建出的分支如果被修改过，那么就必须强制删除了</span><br> <span class="hljs-comment"># 普通删除</span><br> git branch -d 分支名称<br> <br> <span class="hljs-comment"># 强制删除</span><br> git branch -D 分支名称<br> <span class="hljs-comment"># 分支合并</span><br><span class="hljs-comment">#将目标分支合并到当前分支中，合并的是文件夹、文件、文件内容</span><br><span class="hljs-comment">#这里要注意的是，如果两个分支或多个开发者修改了同一个文件，就会产生冲突的问题</span><br>git merge 目标分支名称<br><br><br></code></pre></td></tr></table></figure><h1 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h1><p>解决冲突也非常简单，删除标记 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> <code>===========</code> <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>，保留代码，提交到本地仓库即可，同时也可以推送到远程仓库</p><h1 id="git远程命令"><a href="#git远程命令" class="headerlink" title="git远程命令"></a>git远程命令</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#关联远程仓库</span><br><span class="hljs-comment"># 建立远程仓库的关联关系，可以建立多个</span><br>git remote add 关联名称 仓库地址<br><br><span class="hljs-comment"># 查询当前本地仓库关联的远程仓库关系</span><br>git remote -v<br></code></pre></td></tr></table></figure><h1 id="删除远程仓库关系"><a href="#删除远程仓库关系" class="headerlink" title="删除远程仓库关系"></a>删除远程仓库关系</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git remote remove 关联名称<br></code></pre></td></tr></table></figure><h1 id="推送本地仓库代码到远程仓库中"><a href="#推送本地仓库代码到远程仓库中" class="headerlink" title="推送本地仓库代码到远程仓库中"></a>推送本地仓库代码到远程仓库中</h1><p>第一次推送代码时，会输入用户名和密码</p><p>如果密码输入错误，清理windows的git凭证，重新推送，输入用户名和密码</p><p>***注意先从远程仓库更新代码下来再进行推送</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><br>git push 关联名称 本地仓库分支名称<br></code></pre></td></tr></table></figure><h1 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h1><p>除了远程仓库的默认分支外，其余分支都可以被删除掉</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git push -d 关联名称 远程分支名称<br></code></pre></td></tr></table></figure><h1 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h1><p>拉取本地已有的分支代码，更新代码</p><p>拉取本地没有的代码，更新分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 将当前远程分支代码更新到本地所处分支</span><br>git pull 关联名称 远程分支名称<br><br><span class="hljs-comment"># 将远程仓库的分支更新下来</span><br>git pull 关联名称 远程分支名称:本地分支名称<br><br><span class="hljs-comment"># 如果强制的要求远程分支和本地分支进行合并需要指定参数--allow-unrelated-histories</span><br>git pull 关联名称 远程分支名称 --allow-unrelated-histories<br><br></code></pre></td></tr></table></figure><h1 id="每次代码提交前可以做此操作，可以解决冲突"><a href="#每次代码提交前可以做此操作，可以解决冲突" class="headerlink" title="每次代码提交前可以做此操作，可以解决冲突"></a>每次代码提交前可以做此操作，可以解决冲突</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">#切换上一次提交工作区</span><br>git stash<br><span class="hljs-comment">#拉代码</span><br>git pull 远程连接名 分支<br><span class="hljs-comment">#恢复工作区</span><br>git stash pop<br><span class="hljs-comment">#有冲突解决冲突 ，提交代码</span><br></code></pre></td></tr></table></figure>          </div>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo用户手册</title>
    <link href="/posts/984.html"/>
    <url>/posts/984.html</url>
    
    <content type="html"><![CDATA[<h1 id="关于指南"><a href="#关于指南" class="headerlink" title="关于指南"></a>关于指南</h1><div class="note note-success">            <p>TIP</p><p>致主题的新用户：</p><p>本指南经过数个版本打磨，绝大部分的功能都有详细说明，请仔细阅读，节约自己和他人的时间；</p><p>本指南中提到的：”站点配置” 指的 Hexo 博客目录下的 _config.yml，”主题配置” 指的是 theme&#x2F;fluid&#x2F;_config.yml 或者 _config.fluid.yml ，注意区分；</p><p>本指南中提到的 source 目录都指的是博客目录下的 source 文件夹，不推荐修改主题内 source 目录；</p><p>每次无论 hexo g 或 hexo s，都最好先使用 hexo clean 清除本地缓存；</p><p>页面结果以本地 hexo s 为准，部署后的异常大部分是线上缓存原因，在确认没有报错的情况下，等待若干时间后即可正常；</p><p>由于主题的不同版本会存在配置差异，本指南以最新版本为准。</p>          </div>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Hexo</title>
    <link href="/posts/7252.html"/>
    <url>/posts/7252.html</url>
    
    <content type="html"><![CDATA[<h3 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h3><p>世界</p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>58f30ab21e1a7e7b84d4</p><p>8699b5097ea2ffc44ea51660f3147c9f46e5f42f</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello Hexo</title>
    <link href="/posts/7251.html"/>
    <url>/posts/7251.html</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
